<?xml version="1.0" encoding="UTF-8"?><OWASPZAPReport generated="jeu., 7 mai 2015 16:14:12" version="2.4.0">
<site host="localhost" name="http://localhost:8180" port="8180" ssl="false"><alerts><alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/robots.txt</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/robots.txt</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/robots.txt</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/sitemap.xml</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/sitemap.xml</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/sitemap.xml</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/home.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/home.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/home.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/contact.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/contact.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/contact.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/about.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/about.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/about.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param>input</param>
  <attack/>
  <evidence>&lt;input id="password" name="password" type="password"&gt;</evidence>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=5</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=5</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48263</param>
  <attack/>
  <evidence>b_id=48263</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=3</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=3</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=2</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=2</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=6</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=6</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=7</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=4</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=4</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=23</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=23</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=23</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=1</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=1</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?typeid=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=19</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=19</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=19</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=22</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=22</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=22</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=27</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=27</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=27</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=7</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=7</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=7</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=24</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=24</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=24</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=28</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=28</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=28</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=31</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=31</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=31</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=16</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=16</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=16</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=13</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=13</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=13</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=10</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=10</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=10</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=4</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=4</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=4</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=9</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=9</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=9</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=6</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=6</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=6</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=8</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=8</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=8</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/style.css</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/style.css</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/style.css</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/js/util.js</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/js/util.js</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/js/util.js</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=2</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=2</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=2</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/score.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/score.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/score.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10012</pluginid>
  <alert>Password Autocomplete in browser</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>AUTOCOMPLETE attribute is not disabled in HTML FORM/INPUT element containing password type input.  Passwords may be stored in browsers and retrieved.
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param>input</param>
  <attack/>
  <evidence>&lt;input id="password1" name="password1" type="password"&gt;</evidence>
  <otherinfo/>
  <solution>Turn off AUTOCOMPLETE attribute in form or individual input elements containing password by using AUTOCOMPLETE='OFF'
	</solution>
  <reference>http://msdn.microsoft.com/library/default.asp?url=/workshop/author/forms/autocomplete_ovr.asp
	</reference>
  <cweid>525</cweid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp?q=ZAP</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp?q=ZAP</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/search.jsp?q=ZAP</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=25</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=25</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=25</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48264</param>
  <attack/>
  <evidence>b_id=48264</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=11</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=11</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=11</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=12</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=12</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=12</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=5</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=5</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=5</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=14</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=14</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=14</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=15</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=15</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=15</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=26</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=26</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=26</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=29</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=29</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=29</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=17</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=17</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=17</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=18</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=18</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=18</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=30</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=30</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=30</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=21</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=21</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=21</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=20</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=20</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=20</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=32</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=32</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=32</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48265</param>
  <attack/>
  <evidence>b_id=48265</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=1</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=1</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=1</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10016</pluginid>
  <alert>Web Browser XSS Protection Not Enabled</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>Web Browser XSS Protection is not enabled, or is disabled by the configuration of the 'X-XSS-Protection' HTTP response header on the web server
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=3</uri>
  <param/>
  <attack/>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
X-XSS-Protection: 1; mode=block
X-XSS-Protection: 1; report=http://www.example.com/xss
The following values would disable it:
X-XSS-Protection: 0
The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).</otherinfo>
  <solution>Ensure that the web browser's XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to '1'.
	</solution>
  <otherinfo>The X-XSS-Protection HTTP response header allows the web server to enable or disable the web browser's XSS protection mechanism. The following values would attempt to enable it: 
	X-XSS-Protection: 1; mode=block
	X-XSS-Protection: 1; report=http://www.example.com/xss
	The following values would disable it:
	X-XSS-Protection: 0
	The X-XSS-Protection HTTP response header is currently supported on Internet Explorer, Chrome and Safari (WebKit).
	Note that this alert is only raised if the response body could potentially contain an XSS payload (with a text-based content type, with a non-zero length).
	</otherinfo>
  <reference>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	https://blog.veracode.com/2014/03/guidelines-for-setting-security-headers/
	</reference>
  <cweid>933</cweid>
  <wascid>14</wascid>
</alertitem>
<alertitem>
  <pluginid>10021</pluginid>
  <alert>En-tête X-Content-Type-Options manquant</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>L'en-tête X-Content-Type-Options contre le sniffing MIME n'est pas renseigné à 'nosniff'. Ceci permet à de vielles versions d'Internet Explorer et de Chrome de pratiquer le sniffing MIME sur le corps de réponse, conduisant potentiellement à l'interprétation et l'affichage du contenu dans un autre type que celui déclaré. A l'heure actuelle (début 2014), les anciennes versions de Firefox utiliseront le type de contenu déclaré (au cas où un type est déterminé), plutôt qu'analyser le MIME.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=3</uri>
  <param/>
  <attack/>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.</otherinfo>
  <solution>Assurez-vous que l'application ou le serveur internet renseigne l'en-tête Content-Type correctement, et que l'en-tête X-Content-Type-Options prenne la valeur 'nosniff' pour toutes les pages internet.
	Si possible, assurez-vous que l'utilisateur utilise un navigateur moderne et conforme aux standards, qui ne pratique pas du tout le sniffing MIME, ou qui puisse être commandé par l'application ou le serveur internet de manière à ne pas pratiquer le sniffing MIME.
	</solution>
  <otherinfo>Ce problème s'applique toujours aux pages de type erreur (401, 403, 500, etc.), car ces pages sont encore souvent touchées par des problèmes d'injection, auquel cas il est encore possible que les navigateurs interprétent des pages autrement que selon leur type de contenu réel.
	</otherinfo>
  <reference>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx
	https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	</reference>
  <wascid>15</wascid>
</alertitem>
<alertitem>
  <pluginid>10020</pluginid>
  <alert>En-tête X-Frame-Options pas renseigné</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>L'en-tête X-Frame-Options n'est pas incluse dans la réponse HTTP pour protéger contre les attaques de 'ClickJacking'.
	</desc>
  <uri>http://localhost:8180/bodgeit/product.jsp?prodid=3</uri>
  <param/>
  <attack/>
  <otherinfo/>
  <solution>La plupart des navigateurs internet modernes supportent l'en-tête HTTP X-Frame-Options. Assurez-vous que celle-ci est renseignée sur toutes les pages internet retournées par votre site (si cette page ne doit être encadrée que par des pages de votre serveur (p.ex. fait partie d'un FRAMESET), alors utilisez la valeur SAMEORIGIN, sinon choisissez la valeur DENY quand la page n'est jamais encadrée. ALLOW-FROM permet à des sites spécifiques d'encadrer la page, pour autant que le navigateur le supporte).
	</solution>
  <reference>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx
	</reference>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48266</param>
  <attack/>
  <evidence>b_id=48266</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48268</param>
  <attack/>
  <evidence>b_id=48268</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48267</param>
  <attack/>
  <evidence>b_id=48267</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48269</param>
  <attack/>
  <evidence>b_id=48269</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48270</param>
  <attack/>
  <evidence>b_id=48270</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48271</param>
  <attack/>
  <evidence>b_id=48271</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48272</param>
  <attack/>
  <evidence>b_id=48272</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48273</param>
  <attack/>
  <evidence>b_id=48273</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48274</param>
  <attack/>
  <evidence>b_id=48274</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48275</param>
  <attack/>
  <evidence>b_id=48275</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48276</param>
  <attack/>
  <evidence>b_id=48276</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48278</param>
  <attack/>
  <evidence>b_id=48278</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48277</param>
  <attack/>
  <evidence>b_id=48277</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48279</param>
  <attack/>
  <evidence>b_id=48279</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48280</param>
  <attack/>
  <evidence>b_id=48280</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error Disclosure</alert>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param>N/A</param>
  <attack/>
  <evidence>HTTP 500 Internal server error</evidence>
  <otherinfo/>
  <solution>Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.
	</solution>
  <reference>
	</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48281</param>
  <attack/>
  <evidence>b_id=48281</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48282</param>
  <attack/>
  <evidence>b_id=48282</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48283</param>
  <attack/>
  <evidence>b_id=48283</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48285</param>
  <attack/>
  <evidence>b_id=48285</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48286</param>
  <attack/>
  <evidence>b_id=48286</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48284</param>
  <attack/>
  <evidence>b_id=48284</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48287</param>
  <attack/>
  <evidence>b_id=48287</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48288</param>
  <attack/>
  <evidence>b_id=48288</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48289</param>
  <attack/>
  <evidence>b_id=48289</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48290</param>
  <attack/>
  <evidence>b_id=48290</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48292</param>
  <attack/>
  <evidence>b_id=48292</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48293</param>
  <attack/>
  <evidence>b_id=48293</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48294</param>
  <attack/>
  <evidence>b_id=48294</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48295</param>
  <attack/>
  <evidence>b_id=48295</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48296</param>
  <attack/>
  <evidence>b_id=48296</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48298</param>
  <attack/>
  <evidence>b_id=48298</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48297</param>
  <attack/>
  <evidence>b_id=48297</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48299</param>
  <attack/>
  <evidence>b_id=48299</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48300</param>
  <attack/>
  <evidence>b_id=48300</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48301</param>
  <attack/>
  <evidence>b_id=48301</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48302</param>
  <attack/>
  <evidence>b_id=48302</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48303</param>
  <attack/>
  <evidence>b_id=48303</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48304</param>
  <attack/>
  <evidence>b_id=48304</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48305</param>
  <attack/>
  <evidence>b_id=48305</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48306</param>
  <attack/>
  <evidence>b_id=48306</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48307</param>
  <attack/>
  <evidence>b_id=48307</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48308</param>
  <attack/>
  <evidence>b_id=48308</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48309</param>
  <attack/>
  <evidence>b_id=48309</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48310</param>
  <attack/>
  <evidence>b_id=48310</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48311</param>
  <attack/>
  <evidence>b_id=48311</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48312</param>
  <attack/>
  <evidence>b_id=48312</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48313</param>
  <attack/>
  <evidence>b_id=48313</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48314</param>
  <attack/>
  <evidence>b_id=48314</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48315</param>
  <attack/>
  <evidence>b_id=48315</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48317</param>
  <attack/>
  <evidence>b_id=48317</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48316</param>
  <attack/>
  <evidence>b_id=48316</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48318</param>
  <attack/>
  <evidence>b_id=48318</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48319</param>
  <attack/>
  <evidence>b_id=48319</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48320</param>
  <attack/>
  <evidence>b_id=48320</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48321</param>
  <attack/>
  <evidence>b_id=48321</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48322</param>
  <attack/>
  <evidence>b_id=48322</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48323</param>
  <attack/>
  <evidence>b_id=48323</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48324</param>
  <attack/>
  <evidence>b_id=48324</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48325</param>
  <attack/>
  <evidence>b_id=48325</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48327</param>
  <attack/>
  <evidence>b_id=48327</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>10010</pluginid>
  <alert>Cookie set without HttpOnly flag</alert>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>b_id=48328</param>
  <attack/>
  <evidence>b_id=48328</evidence>
  <otherinfo/>
  <solution>Ensure that the HttpOnly flag is set for all cookies.
	</solution>
  <reference>www.owasp.org/index.php/HttpOnly
	</reference>
  <wascid>13</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/basket.jsp</uri>
  <param>productid</param>
  <attack>5-2</attack>
  <otherinfo>Les résultats de la page originale ont été reproduits avec succès en utilisant l'expression [5-2] comme valeur du paramètre
La valeur du paramètre NOT  en cours de modification est extraite de la sortie HTML à fin de comparaison</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page originale ont été reproduits avec succès en utilisant l'expression [5-2] comme valeur du paramètre
	La valeur du paramètre NOT  en cours de modification est extraite de la sortie HTML à fin de comparaison
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param>q</param>
  <attack>%</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [%] et [XYZABCDEFGHIJ]
La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
La donnée a été retournée pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [%] et [XYZABCDEFGHIJ]
	La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
	La donnée a été retournée pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/advanced.jsp</uri>
  <param>q</param>
  <attack>%</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [%] et [XYZABCDEFGHIJ]
La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
La donnée a été retournée pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [%] et [XYZABCDEFGHIJ]
	La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
	La donnée a été retournée pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param>password</param>
  <attack>ZAP' OR '1'='1</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP' AND '1'='1] et [ZAP' OR '1'='1]
La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
Les données n'ont PAS été retournées pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre pour récupérer avec succès plus de données qu'initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP' AND '1'='1] et [ZAP' OR '1'='1]
	La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
	Les données n'ont PAS été retournées pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre pour récupérer avec succès plus de données qu'initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/login.jsp</uri>
  <param>password</param>
  <attack>ZAP' OR '1'='1</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP' AND '1'='1] et [ZAP' OR '1'='1]
La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
Les données n'ont PAS été retournées pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre pour récupérer avec succès plus de données qu'initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP' AND '1'='1] et [ZAP' OR '1'='1]
	La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
	Les données n'ont PAS été retournées pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre pour récupérer avec succès plus de données qu'initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param>username</param>
  <attack>ZAP%</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP%] et [ZAPXYZABCDEFGHIJ]
La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
La donnée a été retournée pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP%] et [ZAPXYZABCDEFGHIJ]
	La valeur du paramètre en cours de modification NOT  est extraite de la sortie HTML à fin de comparaison
	La donnée a été retournée pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
<alertitem>
  <pluginid>40018</pluginid>
  <alert>Injection SQL</alert>
  <riskcode>3</riskcode>
  <confidence>2</confidence>
  <riskdesc>High (Medium)</riskdesc>
  <desc>Une injection SQL peut être possible.
	</desc>
  <uri>http://localhost:8180/bodgeit/register.jsp</uri>
  <param>username</param>
  <attack>ZAP%</attack>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP%] et [ZAPXYZABCDEFGHIJ]
La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
La donnée a été retournée pour le paramètre d'origine.
La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,</otherinfo>
  <solution>Ne faites pas confiance aux entrées du côté client, même si des mécanismes de validation sont en place côté client. 
	En général, contrôlez du côté serveur le type de chaque donnée.
	Si l'application utilise JDBC, utilisez les PreparedStatement ou CallableStatement, avec les paramètres passés par '?'
	Si l'application utilise ASP, utilisez les Objects de Commande ADO avec un typage fort et des requêtes paramétrées.
	Si l'utilisation de Procédure Stockées est possible, utilisez-les. 
	Ne concaténez *pas* les chaînes de caractères dans les requêtes des procédures stockées, ou utilisez les fonctions 'exec', 'exec immediate' ou d'autre fonctions équivalentes!
	Ne créez pas des requêtes SQL dynamiques par simples concaténation de chaînes de caractères.
	Échappez toutes les données reçues du client.
	Appliquez une 'liste blanche' des caractères autorisés, ou une 'liste noir' des caractères interdits dans les entrées de l'utilisateur.
	Appliquez le principe de moindre privilège en utilisant les privilèges utilisateur minimaux sur la base de donnée.
	En particulier, évitez l'utilisation des utilisateurs 'sa' ou 'db-owner'. Ceci n'évite pas les injections SQL, mais minimise leur impact.
	Accordez les plus faibles droits d'accès aux bases de données nécessaires à l'application.
	</solution>
  <otherinfo>Les résultats de la page ont été manipulés avec succès en utilisant les conditions booléennes [ZAP%] et [ZAPXYZABCDEFGHIJ]
	La valeur du paramètre en cours de modification  est extraite de la sortie HTML à fin de comparaison
	La donnée a été retournée pour le paramètre d'origine.
	La vulnérabilité a été détectée en manipulant le paramètre, ce qui a restreint avec succès les données initialement retournées,
	</otherinfo>
  <reference>https://www.owasp.org/index.php/Top_10_2010-A1
	https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
	</reference>
  <cweid>89</cweid>
  <wascid>19</wascid>
</alertitem>
</alerts></site></OWASPZAPReport>